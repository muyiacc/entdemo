// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/item"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Dt holds the value of the "dt" field.
	Dt string `json:"dt,omitempty"`
	// Cat holds the value of the "cat" field.
	Cat string `json:"cat,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// ExtID holds the value of the "ext_id" field.
	ExtID string `json:"ext_id,omitempty"`
	// Imdb holds the value of the "imdb" field.
	Imdb         string `json:"imdb,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldID, item.FieldSize:
			values[i] = new(sql.NullInt64)
		case item.FieldHash, item.FieldTitle, item.FieldDt, item.FieldCat, item.FieldExtID, item.FieldImdb:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldHash:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[j])
			} else if value.Valid {
				i.Hash = value.String
			}
		case item.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case item.FieldDt:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dt", values[j])
			} else if value.Valid {
				i.Dt = value.String
			}
		case item.FieldCat:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cat", values[j])
			} else if value.Valid {
				i.Cat = value.String
			}
		case item.FieldSize:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[j])
			} else if value.Valid {
				i.Size = int(value.Int64)
			}
		case item.FieldExtID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext_id", values[j])
			} else if value.Valid {
				i.ExtID = value.String
			}
		case item.FieldImdb:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imdb", values[j])
			} else if value.Valid {
				i.Imdb = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Item.
// This includes values selected through modifiers, order, etc.
func (i *Item) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return NewItemClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("hash=")
	builder.WriteString(i.Hash)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("dt=")
	builder.WriteString(i.Dt)
	builder.WriteString(", ")
	builder.WriteString("cat=")
	builder.WriteString(i.Cat)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", i.Size))
	builder.WriteString(", ")
	builder.WriteString("ext_id=")
	builder.WriteString(i.ExtID)
	builder.WriteString(", ")
	builder.WriteString("imdb=")
	builder.WriteString(i.Imdb)
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item
